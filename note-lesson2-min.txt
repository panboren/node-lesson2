## buffer（16进制）

## 字节
- 1024b = 1k
- 8bit(8个二进制) = 1b
- 1个汉字(3个b)
- 1个字节转化成十进制是255
- 1个字节最大转换成16进制是ff

// 1.通过长度创建
var buffer = Buffer.alloc(100); // 相对这种方法比较耗性能

类：
var buffer = Buffer.allocUnsafe(100);

Buffer.alloc(100);

 Buffer.from([]);// 会自动把10进制转化成16进制
console.log(buffer);

Buffer.alloc(100); // 相对这种方法比较耗性能

Buffer.allocUnsafe(100);
Buffer.concat([， ，])
Buffer.isBuffer(buff)

实例：
buffer.fill(0);
buffer.slice(0,1); // 拷贝出来的存放的是内存地址空间
buf1.copy(buf,0);

//1.把16进制转化成2进制 toString()
(0xe7).toString(2)

//2.将这些值转化成10进制 去可见编码中取值 parseInt
parseInt('00111001', 2)


// await后面只能跟随promise 终极解决方案
async function result () {
    let content1 = await read('./1.txt','utf8');
    let content2 = await read(content1,'utf8');
    let str = content2+'姜文';
    console.log(str);
}

async function result() {
    let [name,age]=await Promise.all([read('x.txt','utf8'),read('y.txt','utf8')]);
    console.log(name,age);
}
result();
// promise解决的问题 1.回调地狱 2.合并异步的返回结果 3.async，await 简化promise写法的 （语法糖）

//1.回调地狱 链式写法then
//2.解决同步异步的结果 Promise.all，如果都成功才算成功，有一个失败了就失败了,Promise.race(),谁快以谁为准，得到结果以后就结束了

// 如果程序 只开始执行一次 可以同步。readFile会把内容读到内存中，用这种方式会导致淹没可用内存。

// fileSystem 文件系统 文件的读写
let fs = require('fs');
// 既有同步又有异步方法，异步有callback

// 同步的读取
// 1.读取文件 文件必须存在。不能通过/读取内容 /表示的是根目录
// 2.读取的默认类型是buffer
fs.readFileSync(）
fs.readFile(）

// 读取都是类型都是buffer 写入的时候utf8
// 读取的文件必须存在，写的时候文件不存在会自动创建，里面有内容会覆盖掉
// 默认会调用toString方法
fs.writeFile(）
fs.writeFileSync(）

/*fs.stat('/',function (err,stats) {
    if(err){/!*文件不存在*!/}
    console.log(stats.isFile()); //判断是不是文件
    console.log(stats.isDirectory()); // 判断是不是文件夹
});*/

 fs.mkdir(p,function (err) {}）
创建文件夹

let path = require('path');
// 拼一个路径出来
console.log(path.join(__dirname, './a','./b'));
// 解析一个绝对路径出来
console.log(path.resolve('./a','./b'));

// 发布订阅
let EventEmitter = require('events');

util.inherits(Girl,EventEmitter);

// removeListener once on emit

// 流 可读流和可写流
// 流：边读边写 不是疯狂的读

// highWaterMark 每次能读取多少 默认64k我们默认不需要更改
// 读取默认时buffer类型
let rs = fs.createReadStream('1.txt',{highWaterMark:1});
// 需要监听事件 数据到来的事件 rs.emit('data',数据);
// 默认叫非流动模式 => 流动模式

rs.on('data',function (chunk) {})
// 默认data事件是不停的触发，直到文件中的数据全部读出来
rs.on('end',function () {})

rs.on('err',function (err) {
    // 文件不存在 错误
});
 rs.pause(); // 暂停 暂停是on('data')的触发
rs.resume(); // 恢复data事件的触发

// on('data') on('err') on('end') resume() pause()

